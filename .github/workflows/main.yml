name: workflow

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'

permissions:
  id-token: write
  contents: read

jobs:
  integration:
    name: Continuous Integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Lint code
        run: echo "Linting repository"

      - name: Run unit tests
        run: echo "Running unit tests"

  build:
    name: Build and Push ECR Image
    needs: integration
    runs-on: ubuntu-latest
    # This 'outputs' section makes the image URI available to other jobs
    outputs:
      image_uri: ${{ steps.build-image.outputs.image }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Utilities
        run: |
          sudo apt-get update
          sudo apt-get install -y jq unzip
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          # Use the modern syntax to set the output variable
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  deploy:
    name: Continuous Deployment
    needs: build # This job now depends on the 'build' job
    runs-on: self-hosted
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Stop and remove existing container
        run: |
          # This command will stop and remove the container if it exists, but won't fail if it doesn't
          docker rm -f networksecurity || true
      
      - name: Pull latest image
        run: |
          # Use the exact image URI from the build job's output
          docker pull ${{ needs.build.outputs.image_uri }}
            
      - name: Run Docker Image to serve users
        run: |
          # The -e flags pass your secrets securely into the container
          docker run -d -p 8080:8080 --ipc="host" --name=networksecurity \
            -e "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" \
            -e "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
            -e "AWS_REGION=${{ secrets.AWS_REGION }}" \
            -e "MLFLOW_TRACKING_URI=https://dagshub.com/vikas1969awz/NetworkSecurity.mlflow" \
            -e "MLFLOW_TRACKING_USERNAME=vikas1969awz" \
            -e "MLFLOW_TRACKING_PASSWORD=${{ secrets.DAGSHUB_USER_TOKEN }}" \
            -e "DAGSHUB_USER_TOKEN=${{ secrets.DAGSHUB_USER_TOKEN }}" \
            ${{ needs.build.outputs.image_uri }} # Use the exact image URI here as well

      - name: Clean up unused Docker images
        run: |
          docker image prune -f

